
------////////사용할 테이블 조회
SELECT * FROM GMNMST


-----/////프로시저 실행
EXEC TEST1234('TEST1111111', '테스트자료', '19900101', '01012341234');

-----////실행되었는지 확인해보샴
SELECT * FROM GMNMST
WHERE GNNAME = '테스트자료'

------////////////insert하는 프로시저 예제.
CREATE OR REPLACE PROCEDURE TEST1234
( P_CMNCOD IN VARCHAR2,
  P_GNNAME IN VARCHAR2,
  P_BIRDAY IN VARCHAR2,
  P_TELNUM IN VARCHAR2
  )
IS
BEGIN
INSERT INTO GMNMST (GMNCOD, GNNAME, BIRDAY, TELNUM)
VALUES(P_CMNCOD, P_GNNAME, P_BIRDAY, P_TELNUM);
commit;
END TEST1234; 

------////////////select하는 프로시저 예제.
create or replace PROCEDURE TEST_PR_SEL
( P_GMNCOD IN VARCHAR2
, OUT_CURSOR  OUT sys_refcursor 
  )
IS
--vGMNCOD GMNMST.GMNCOD%TYPE;
--vGNNAME GMNMST.GNNAME%TYPE;
BEGIN
--SELECT GMNCOD, GNNAME INTO vGMNCOD, vGNNAME 
--FROM GMNMST
--WHERE GMNCOD = P_GMNCOD;
OPEN OUT_CURSOR FOR
SELECT * FROM GMNMST
WHERE GMNCOD = P_GMNCOD;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('SQL ERROR MESSAGE: ' || SQLERRM);
END TEST_PR_SEL;

--//////출력
VAR OUT_CURSOR REFCURSOR
EXEC TEST_PR_SEL('TEST1111111', :OUT_CURSOR)
PRINT OUT_CURSOR

------///트리거 생성 구문
CREATE OR REPLACE TRIGGER TEST321
AFTER INSERT
ON GMNMST
BEGIN
DBMS_OUTPUT.PUT_LINE('관리인 등록 완료! 축하');
END;

--//시스템 변수 적용하기
SET SERVEROUTPUT ON

-----before 트리거와 old, new 구문 사용하기
----before 트리거 테스트
CREATE OR REPLACE TRIGGER TEST_UPBF
BEFORE UPDATE
ON GMNMST
FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE('변경 전 컬럼 값 : ' || :old.GNNAME);
DBMS_OUTPUT.PUT_LINE('변경 후 컬럼 값 : ' || :new.GNNAME);
END;

SET SERVEROUTPUT ON

UPDATE GMNMST
SET GNNAME = 'ss'
WHERE GMNCOD = 'd'

-------///하나의 값만 반환하는 함수
create or replace FUNCTION TEST_FN_ONE( 
P_GMNCOD IN VARCHAR2
) RETURN VARCHAR2 
IS
vGMNCOD GMNMST.GMNCOD%TYPE;
vGNNAME GMNMST.GNNAME%TYPE;
BEGIN 
SELECT GMNCOD, GNNAME INTO vGMNCOD,vGNNAME  
FROM GMNMST 
WHERE GMNCOD = P_GMNCOD; 
RETURN vGNNAME; 
END TEST_FN_ONE;

---사용
SELECT TEST_FN_ONE('d') FROM DUAL

-----------날짜조회 펑션과 사용법
CREATE OR REPLACE FUNCTION TEST_FN_DAY
RETURN VARCHAR2 
IS
v_DATE VARCHAR2(8);
BEGIN 
SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')
INTO V_DATE
FROM DUAL;
RETURN v_DATE; 
END;

--실행
SELECT TEST_FN_DAY() FROM DUAL

테이블 자체를 return받으려면 
행을 리턴받는 object 타입을 생성해주고, 
임시로 테이블 타입 객체 생성해주는, 
함수에서 반환하는 레코드의 집합(테이블)을 정의해줘야 한다.

순서는 object 타입 생성
임시 테이블 타입 객체 받는 반환하는 레코드 집합 생성
함수 생성

-------//행을 RETURN받는 OBJECT 타입 생성
CREATE OR REPLACE TYPE TEST_GMNCOD_TYPE AS OBJECT(
GMNCOD VARCHAR2(15),
GNNAME VARCHAR2(20),
BIRDAY VARCHAR2(8),
TELNUM VARCHAR2(20))

--------//임시 TABLE TYPE 객체 생성. 함수에서 반환하는 레코드의 집합(테이블) 정의
CREATE OR REPLACE TYPE TEST_GMNCOD_TABLE AS TABLE OF TEST_GMNCOD_TYPE;

-----------/////함수 생성
CREATE OR REPLACE FUNCTION TEST_FN(
P_GMNCOD IN VARCHAR2)
RETURN TEST_GMNCOD_TABLE
IS V_RSLT TEST_GMNCOD_TABLE;
BEGIN
SELECT TEST_GMNCOD_TYPE(GMNCOD, GNNAME, BIRDAY, TELNUM)
BULK COLLECT INTO V_RSLT
FROM GMNMST
WHERE GMNCOD = P_GMNCOD;
RETURN V_RSLT;
END TEST_FN;

----/////조회
SELECT * FROM TABLE(TEST_FN('d'));


